breed [producers producer]

producers-own [
  name 
  kind
  MaxCapacity 
  marginal_cost
  quality_product
  innovation
  advertising
  efficiency
  price
  profit
  new_profit
  quantity_sold
  quantity_left
  new_quantity_sold
  invest?
  profit_post
  efficiency_post
  advertising_post
  quality_product_post
  mc_post
  price_post
  innovation_post
  incentive
  equity
  price_pre_growth
  mc_post_growth
  surplus_on_mc
  price_post_growth
  ]

to Producer_setup  
  create-producers HowManyProducers 
  set demand HowManyConsumers?
  set mi 0
  set product_list []
  ask producers [ 
    set kind 0   
    set profit 0
    set equity profit
    set MaxCapacity round (Demand / (HowManyProducers)) + P_capacity_surplus * demand
      
    ;type "Capacity for " show capacity
    ;; -----------------------------------
    ;; MODEL FIRMS' HETEOROGENEITY:
    ;; - different marginal costs
    ;; - different fixed costs
    ;; - different investments in advertising and innovation
    ;; - different prices
    ;; - different quality
    ;; Each attribute differs according to the capacity of the firm 
    ;;  => Ex: Big capacity => low marginal costs, 
    ;;                         higher investments in advertising (and innovation)
    ;;                         low quality
    ;;                         low price
    ;; -----------------------------------
             
        set innovation random-normal innovation_mean innovation_SD             
        set advertising random-normal advertising_mean advertising_SD 
        set quality_product random-normal quality_mean quality_SD 
        set efficiency random-normal efficiency_mean efficiency_SD
        if efficiency > (innovation + advertising + quality_product )[
          set efficiency (innovation + advertising + quality_product - 1) ]
        set marginal_cost innovation + advertising + quality_product - efficiency              
        set surplus_on_mc random (P_surplus_on_mc)
        set price (marginal_cost + surplus_on_mc) 
    set mc_list []
    set mc_list lput marginal_cost mc_list
    set min_mc min mc_list        
    set product_list lput self product_list
    set name mi
    set mi mi + 1
]
end

to Producer_new_tick
  ask producers[
    set profit new_profit
    set quantity_sold 0
    set quantity_left Maxcapacity
  ]
end

to Producer_price_correction
  ask producers [
    if price < marginal_cost[
      set price  marginal_cost]
    
    if quantity_left > 0 [
      if price - 1 > marginal_cost [
        set price price - 1
        ]
      ]
    ]   
end

to Producer_calc_new_profit
  ask producers[
    set new_profit precision((price - marginal_cost) * quantity_sold)2
    set equity equity + new_profit
    set equity_list []
    
    foreach product_list [
    set equity_list lput [equity] of ? equity_list]
    set max_equity max equity_list
  ]
  show sort-by > equity_list

end

to Producer_growth
  ask producers [
    if ticks =  P_capacity_grows_at_tick[
      if equity >= 0.7 * max_equity [
        set kind  1
      ]
    ]
    if kind = 0 and (count producers with [kind = 1]) > 0  [
      set quality_product quality_product + 0.1
    ]
    if kind = 1 [
      set MaxCapacity MaxCapacity + random(P_add_capacity)
      set advertising advertising + P_add_adv_post_growth
      set innovation innovation + P_add_inn_post_growth
      set efficiency efficiency + P_add_eff_post_growth
      if quality_product >= P_min_quality [
       set quality_product quality_product - P_lost_quality_post_growth
      ]
      let NOfkind1 count producers with [kind = 1]
      let NOfKind2 count producers with [kind = 2]
      let NofKind1/2 NOfKind1 + NOfKind2
      if MaxCapacity > ((P_demand_for_big * demand) / NOfKind1/2) [
        set kind 2
      ]
    ]
    set marginal_cost advertising + quality_product + innovation - efficiency
  ]
    

;    set mc_post_growth advertising + innovation + quality_product - efficiency
;    set price_post_growth price + (mc_post_growth - marginal_cost )
;    set price price_post_growth
;    set price_list []
;    set price_list lput price price_list
;    set max_price max price_list
;    set min_price min price_list
    
    ;type "min price" show min_price
    ;type "capacity" show MaxCapacity
    ;type "N" show (count producers with [size >= P_size_big])
  
  
end


to NewTechnology
  ; I compute the new marginal cost after the innovation {mc_post}
  ; Each firm forecasts the market share {random(quantity_left)} It could gain from reducing its price 
  ; I compute the incentives to innovate for each firm
 
  ask producers[
    if marginal_cost > P_minimum_marginal_cost[
     set efficiency_post efficiency + (Technologycost / P_efficiency_base_cost)
     set innovation_post innovation + (Technologycost / P_innovation_base_cost)
     set mc_post quality_product + innovation_post + advertising - efficiency_post
     ]
    if quantity_left > 0 [
       set quantity_sold quantity_sold + random (quantity_left)                 
       set profit_post (price - mc_post) * quantity_sold
       ifelse profit_post != 0 [
       set incentive (profit_post - profit) / (profit_post)
       ]
       [                         
       set incentive 0
       ]
       ]
     ]
     
     let producers_list sort producers with [quantity_left > 0]
     let incentives_list []
     foreach producers_list[
       set incentives_list lput [incentive] of ?  incentives_list
       ]
     let max_incentive max incentives_list
     let maxinc []
     let act_i 0
     foreach incentives_list[
       if ? = max_incentive [
         set maxinc lput act_i maxinc
         ]
       set act_i act_i + 1
       ]
     let investor_index one-of maxinc
     let investor item investor_index producers_list

     ask investor[
       set marginal_cost mc_post
       set invest? "Yes" 
       set innovation innovation_post
       set efficiency efficiency_post
       ]
  end     

to AdvertisingCampaign 
   ask producers[
      let investors_list sort producers with [quantity_left > 0]
      set advertising_post advertising + (AdvCost / P_advertising_base_cost)
      set mc_post marginal_cost + (advertising_post - advertising)
      set price_post price + mc_post - marginal_cost
      ifelse advCost <= 100 [
      if quantity_left > 0[
        set advertising advertising_post
        set marginal_cost mc_post
        set price price_post
        show who]
      ]
      [if quantity_left > 0 and kind = 1 [
          set advertising advertising_post
          set marginal_cost mc_post
          set price price_post
          show who]
      ]
   ]
   
end

to HumanCapital
  ask producers[
      set quality_product_post quality_product + (HumCapCost / P_quality_base_cost)
      set mc_post marginal_cost + (quality_product_post - quality_product)
      set price_post price + (mc_post - marginal_cost)
      let quality_list [] 
      let investors_list sort producers with [quantity_left > 0]
      foreach investors_list[
        set quality_list lput [quality_product] of ? quality_list
        ]
      let max_quality max quality_list
      let maxq []
      let act_i 0
      foreach quality_list[
        if ? = max_quality [
          set maxq lput act_i maxq
          ]
       set act_i act_i + 1
     ]
     let investor_index one-of maxq
     let investor item investor_index investors_list
     
      ask investor [
      set quality_product quality_product_post
      set marginal_cost mc_post
      set price price_post
      ]
      ]
   
  
end












