breed [consumers consumer]

consumers-own
[ name
  age
  educational_level
  professional_level
  social_class 
  affordable_products
  innovativeness
  conditioning
  imitation
  quality
  irrationality
  reservation_price
  purchase
  greed
  best_producer
]

to Consumer_setup
  create-consumers HowManyConsumers? 
  set ni 0
  ask consumers [
    set age random (P_age) 
    
    ifelse age >= P_class_age_4[
      set educational_level P_edu_level_2 + random (P_edu_level_5)  
      set professional_level random (P_pro_level_5)
    ] [ 
      ifelse age >= P_class_age_3 [ 
        set educational_level P_edu_level_2 + random (P_edu_level_4) 
        set professional_level random (P_pro_level_4)
      ] [ 
        ifelse age >= P_class_age_2 [ 
          set educational_level P_edu_level_2 + random (P_edu_level_3)  
          set professional_level  random (P_pro_level_3)
        ] [ 
          ifelse age >= P_class_age_1 [ 
            set educational_level P_edu_level_2
            set professional_level P_pro_level_1
          ] [ 
            ifelse age >= P_class_age_0 [ 
              set educational_level P_edu_level_1
              set professional_level P_pro_level_1
            ] [ 
              set educational_level P_edu_level_0
              set professional_level P_pro_level_0
            ]
          ]
        ]
      ]
    ]
    ;; social class can assume:
    ;; 0 => proletariat
    ;; 1=> middle-class
    ;; 2 =>upper-class
    
    set social_class random (P_social_class)  
    ifelse age > P_class_age_5 [
      set innovativeness precision(1 + random-float(P_Inn_age>50))2
    ] [
      set innovativeness precision (1 + random (P_Inn_age<50))2
    ]

    set reservation_price min_mc + professional_level * (social_class + 1) * 3 +  random (P_res_price_surplus)
    ;type "min price consumer" show min_price
    set conditioning precision (1 + random-float (P_Conditioning_weight))2 
    set quality   precision (1 + random-float (P_quality_weight))2 
    set greed  precision( 1 + random-float (P_greed_weight))2
    set irrationality random (2)
   

    set ni ni  + 1
      set name ni
       ;type "name" show ni
 ]

end

to find_best_producer

  ask consumers[
    set affordable_products filter [ [price] of ? <= reservation_price and [quantity_left] of ? > 0  ] product_list
    if empty? affordable_products [
      set purchase 0
      stop
    ]
    let price_AP []
    let quality_AP []
    let innovation_AP []
    let advertising_AP []

    let score_price_AP []
    let score_quality_AP []
    let score_innovation_AP []
    let score_advertising_AP []
    let total_score_AP []
    
    foreach affordable_products [
      let delta_price (reservation_price - [price] of ?)
      let score_price delta_price * greed 
      let score_quality [quality_product] of ? * quality 
      let score_innovation [innovation] of ? * innovativeness 
      let score_advertising [advertising] of ? * conditioning 
      let rank round (score_price + score_quality + score_innovation + score_advertising)
      set total_score_AP lput rank total_score_AP

    ]
    if irrationality = 0 [
      let best_producer_index find_best_score total_score_AP   
      set best_producer item best_producer_index affordable_products
    ]
    if irrationality = 1 [
      let length_AP length affordable_products
      set best_producer item random (length_AP) affordable_products
    ]
      ask best_producer [
        set quantity_sold quantity_sold + 1 
        set quantity_left quantity_left - 1
      ]
    
    
      
      
      set purchase 1
      let consumer_list []
      set consumer_list sort consumers
  ]
  
end

;to revise_reservation_price
;  ask consumers[
;  set reservation_price min_mc + professional_level * (social_class + 1) * 3 +  random (P_res_price_surplus)
;  ]
;end

to-report find_best_score [ts]
  let mscore max ts
  let maxs []
  let act_i 0
  foreach ts [
   if ? = mscore [
      set maxs lput act_i maxs
   ]
   set act_i act_i + 1 
  ]
  report one-of maxs
end 
